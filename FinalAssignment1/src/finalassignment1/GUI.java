/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package finalassignment1;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Michael and Brandan
 */
public class GUI extends javax.swing.JFrame {
    
    int xx,yy; // xx = length of the array, yy = width of array
    String checkedarray [][]; // the array of x's and y's to see if we checked a cell or not 
    int generation,  counter, a = 0; // generation is the number of stages, counter is used for keeping track of the number of alive cells, a is used for reading the file in
  
    String array1 [][]; // the original array (the one read in from the file)
    String array2 [][]; // the array that we modify
    int frameWidth; // the width of the frame
    int frameHeight; // the height of the frame
    JFrame frame;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtArraySizeX = new javax.swing.JTextField();
        txtArraySizeY = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnNextStage = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtGeneration = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Size of Array");

        jLabel2.setFont(new java.awt.Font("Narkisim", 0, 18)); // NOI18N
        jLabel2.setText("Final Assignment Question 1");

        jLabel3.setText("X");

        btnStart.setText("GO!");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        btnNextStage.setText("Next Stage!");
        btnNextStage.setEnabled(false);
        btnNextStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextStageActionPerformed(evt);
            }
        });

        jLabel4.setText("Generation #");

        txtGeneration.setEditable(false);
        txtGeneration.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(191, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtGeneration))
                .addGap(214, 214, 214))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(btnNextStage)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtArraySizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArraySizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArraySizeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtArraySizeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNextStage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//pre: nothing
//read file and calls the output frame method
//post: nothing     
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        btnStart.setEnabled(false);
        btnNextStage.setEnabled(true);

        // gets width and height of array (user inputted)
        xx = Integer.parseInt(txtArraySizeX.getText()); 
        yy = Integer.parseInt(txtArraySizeY.getText());
        
        // dimensions of the frame
        frameWidth = 400;
        frameHeight = 400;
        
        // sets the dimensions of the arrays
        array1 = new String [yy][xx];
        array2 = new String [yy][xx];
        checkedarray = new String [yy][xx];
        
        //Q1Test is 20x19
        //Q2Test is 9x5
        //Q3Test is 20 x 8
        
        //Reads the file in
        try {
            BufferedReader grid = new BufferedReader (new FileReader ("Q1Test.txt"));
            while (true) {
                String line = "";
                try {
                    line = grid.readLine();                    
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // no more lines to read
                if (line == null) {
                    try {
                        grid.close();
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                // add every line except for comments
                if (!line.startsWith("#")) {
                    
                        for (int b = 0 ; b < xx ; b++ ){
                            char temp = line.charAt(b); //Required to convert char to String
                            array1[a][b] = Character.toString(temp); 
                        }
                        
                        a++;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //makes array2 equal array1
        for (int i = 0; i < yy ; i ++){
            for (int j = 0 ; j < xx; j ++){
                array2 [i][j] = array1 [i][j];
            }
        }      
        
        // calls the output frame
        f();
        setBoard ();
     
    }//GEN-LAST:event_btnStartActionPerformed
    
   //pre: nothing
   //alls the solveboard method and sets up generation
   //post: nothing 
    private void btnNextStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextStageActionPerformed
        generation ++; // The Next Generation                                                                                                                                                                                                lol star trek
        frame.dispose();
        txtGeneration.setText(Integer.toString(generation)); // sets the generation text box text as the generation number 
        solveBoard();
        
    }//GEN-LAST:event_btnNextStageActionPerformed

    //pre: nothing
    // displays the frame that visually shows the current generation
    //post: nothing
    public void f (){
        
        frame = new JFrame ("The Game of Life");
        frame.setSize (frameWidth, frameHeight);
        frame.setVisible(true);
        frame.setResizable(false);
        frame.getContentPane().add(new DrawingsComponents ());
        //repaint();
          
    }
    
    //pre: nothing
    //draws the current generation on the displayed frame
    //post: nothing 
    public class DrawingsComponents extends Component{

        int across = 0;
        int down = 0;
        int width = 7;
        int height = 7;

        public void paint (Graphics g){

            Graphics2D g2d = (Graphics2D) g;

            // draws filled rectangles if cell is alive, draws empty rectangles is cell is dead
            for (int qq = 0; qq < yy ; qq ++){
                for (int qqw = 0; qqw < xx ; qqw ++){
                    if (array1[qq][qqw].equals ("1")){
                        g2d.fillRect(qqw + across, qq + down, width, height);
                    }else{
                        g2d.drawRect(qqw + across, qq + down, width, height);
                    }
                    across += 8;
                }
                across = 0;
                down += 8;
            }
        }  
    }
    
    //pre: nothing
    //Outputs the board to gui.
    //post: nothing
    public void setBoard (){
                
        //Clears Text Field
        jTextArea1.setText("");
        
        //Outputs new 1 and 0 array to text field.
        for (int q = 0; q < yy; q++){
            for (int w = 0; w < xx; w++){
                jTextArea1.append(array1[q][w]);
            }
           jTextArea1.append("\n");
        }
        
        // allows user to click the next stage
        btnNextStage.setVisible(true);
        
    }
    
    //pre: nothing
    //Solves the board
    //post: sends positions the be solved my the solve cell program
    public void solveBoard (){
        
        // put a y in the checkedarray so that we don't recheck the 
        for (int t = 0; t < yy ; t ++){
            for (int u = 0 ; u < xx ; u ++){  
                checkedarray[t][u] = "y";
            }
        }
        
        for (int a = 0; a < yy; a ++){
            for (int b = 0 ; b < xx ; b ++){
                if (array1[a][b].equals("1")){
                    for (int g = -1; g < 2; g++){
                        for (int h = -1; h < 2; h++){
//                            if (checkedarray[a+g][b+h].equals("y")){
                                if (b != 0 &&  a!= yy-1 && a != 0 && b != xx-1){
                                    //checkedarray[a+g][b+h] = "x";
                                    solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying. 
                                }else if (a == 0 && b == 0){ // top left corner
                                    if (g != -1 && h != -1){
                                    //    checkedarray[a+g][b+h] = "x";
                                        solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying. 
                                    }         
                                }else if (a == 0 && b !=0 && b != xx-1 ){ // only top row, but not the ends of the top row
                                    if (g != -1){ // wont check top row
                                     //   checkedarray[a+g][b+h] = "x";
                                        solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.
                                    }
                                }else if (a == 0 && b == xx-1){ // top right corner
                                    if (g != -1 && h != 1){ 
                                     //   checkedarray[a+g][b+h] = "x";
                                        solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.
                                    }
                                }else if (b == 0 && a != 0 && a != yy-1){ // far left column, but not the ends of the column
                                    if (h != - 1){
                                   //  checkedarray[a+g][b+h] = "x";
                                     solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.   
                                    }
                                }else if (b == xx-1 && a != 0 && a != yy-1){ // far right column, but not the ends of the column
                                    if (g != 1){
                                    // checkedarray[a+g][b+h] = "x";
                                     solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.
                                    }
                                }else if (a == yy-1 && b == 0 ){ // bottom left corner
                                    if (g != 1 && h != -1){
                                    //    checkedarray[a+g][b+h] = "x";
                                        solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.
                                    }
                                }else if (a == yy-1 && b != 0 && b!= xx-1){ // bottom row except corners
                                    if (g != 1 ){
                                    //    checkedarray[a+g][b+h] = "x";
                                        solveCell(a + g, b +h); //calls the method to solve if a cell is living or dying.
                                    }
                                }else if (a == yy-1 && b == xx-1){ //bottom right corner
                                    if ( g != 1 && h != 1){
                                    }
                                }
                            //}
                        }    
                    }
                }
            }
        }
    
        //clears array2
        for (int q = 0; q < yy ; q++){
            for (int w = 0; w < xx ; w++){
                array1 [q][w] = array2 [q][w];
                array2 [q][w] = "0";   
            }
        }
        f();

    //calls setBoard again
        setBoard ();
   }
    
    //pre: positions on the board to solve
    // solves a cell to see if it will live or die based on the cells around it
    //post: nothing
    public void solveCell (int y, int x){
        
        for (int i = -1; i < 2 ; i ++ ){
            for (int j = -1 ; j < 2 ; j ++){
                if (i != 0 || j != 0){
                    if (y != 0 && y != yy-1 && x != 0 && x != xx-1){ //only insides
                        if (array1[y + i][x + j].equals ("1")){
                            counter ++;
                        }
                    }else if (y == 0 && x == 0){ // top left corner
                        if (i != - 1 && j != - 1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (y == 0 && x !=0 && x != xx-1 ){ // only top row, but not the ends of the top row
                        if (i != -1){ // wont check top row
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (y == 0 && x == xx-1){ // top right corner
                        if (i != -1 && j != 1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (x == 0 && y != 0 && y != yy-1){ // far left column, but not the ends of the column
                        if (j != - 1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (x == xx-1 && y != 0 && y != yy-1){ // far right column, but not the ends of the column
                        if (j != 1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (y == yy-1 && x == 0 ){ // bottom left corner
                        if (i != 1 && j != -1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (y == yy-1 && x != 0 && x!= xx-1){ // bottom row except corners
                        if (i != 1 ){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }else if (y == yy-1 && x == xx-1){ //bottom corner
                        if ( i != 1 && j != 1){
                            if (array1[y + i][x + j].equals ("1")){
                               counter ++;
                            }
                        }
                    }
                }
            }   
        }
        
        if (array1 [y][x].equals ("1")){ // if its a one
            if (counter == 2 || counter == 3){
                array2 [y][x] = "1";
            }else{
                array2 [y][x] = "0";
            }
        }else { //if its a 0
            if (counter == 3){
                array2 [y][x] = "1";
            }
        }
        
        counter = 0;
        //Put in an x in our checked-or-not array
    }
    
    /**
     * @param args the command line arguments
     */
    
    //pre: nothing
    //post: nothing
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextStage;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtArraySizeX;
    private javax.swing.JTextField txtArraySizeY;
    private javax.swing.JTextField txtGeneration;
    // End of variables declaration//GEN-END:variables
}
